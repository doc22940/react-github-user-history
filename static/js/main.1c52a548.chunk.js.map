{"version":3,"sources":["reducers/form.js","reducers/table.js","api.js","app.js","index.js","store.js"],"names":["initialState","github_id","reducer","state","arguments","length","undefined","action","newState","Object","objectSpread","type","value","typed_github_id","history","error_response","loading","fetchHistoryAction","dispatch","page","url","axios","get","fetchHistoryPage","then","response","data","catch","error","SelectIdForm","handleChange","_this","props","onInputChange","handleSubmit","event","onInputSubmit","preventDefault","react_default","a","createElement","Form","onSubmit","this","FormGroup","label","isRequired","fieldId","helperText","TextInput","id","onChange","ActionGroup","Button","variant","onClick","React","Component","EventsTable","message","status","statusText","Alert","title","caption","rows","map","e","created_at","repo","name","Table","cells","Header","Body","App","Fragment","Card","CardHeader","Title","size","CardBody","app_SelectIdForm","handleInputChange","handleInputSubmit","app_EventsTable","connect","rForm","rTable","input_value","store","rootReducer","combineReducers","FormReducer","TableReducer","createStore","applyMiddleware","thunk","createMyStore","ReactDOM","render","es","app","document","getElementById"],"mappings":"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","file":"static/js/main.1c52a548.chunk.js","sourcesContent":["const initialState = {\n    github_id: '',\n};\n\nconst reducer = (state = initialState, action) => {\n    const newState = { ...state };\n    if (action.type === 'INPUT_CHANGE') {\n        newState.github_id = action.value;\n    }\n    return newState;\n}\n\nexport default reducer\n","import { fetchHistoryPage } from './../api'\n\nconst initialState = {\n    typed_github_id: null,\n    history: [],\n    error_response: {},\n    loading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    const newState = { ...state };\n    if (action.type === 'FETCH_HISTORY_LOADING') {\n        newState.loading = true;\n    }\n    if (action.type === 'FETCH_HISTORY_SUCCESS') {\n        newState.typed_github_id = action.github_id;\n        newState.history = action.value;\n        newState.error_response = {};\n        newState.loading = false;\n    }\n    if (action.type === 'FETCH_HISTORY_ERROR') {\n        newState.typed_github_id = '';\n        newState.history = [];\n        newState.error_response = action.value;\n        newState.loading = false;\n    }\n    return newState;\n}\n\nfunction fetchHistoryAction(github_id) {\n    return (dispatch) => {\n        dispatch({type: 'FETCH_HISTORY_LOADING'});\n        return fetchHistoryPage(github_id, 1)\n            .then(response => {\n                dispatch(\n                    {\n                        type: 'FETCH_HISTORY_SUCCESS',\n                        value: response.data,\n                        github_id: github_id,\n                    }\n                )\n            })\n            .catch(error => {\n                dispatch(\n                    {\n                        type: 'FETCH_HISTORY_ERROR',\n                        value: error.response\n                    }\n                )\n            })\n    }\n}\n\nexport default reducer\nexport {\n    fetchHistoryAction\n}\n","import axios from 'axios'\n\nfunction fetchHistoryPage(github_id, page) {\n    const url = 'https://api.github.com/users/' + github_id +\n        '/events' + '?page=' + page;\n    return axios.get(url)\n}\n\nexport {\n    fetchHistoryPage\n}\n","import React from 'react';\nimport { connect } from \"react-redux\";\n\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { Form, FormGroup, ActionGroup, TextInput, Button } from '@patternfly/react-core';\nimport { Title, Card, CardHeader, CardBody } from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\n\nimport { fetchHistoryAction } from './reducers/table'\n\n\nclass SelectIdForm extends React.Component {\n\n    handleChange = (value) => {\n        this.props.onInputChange(value);\n    }\n\n    handleSubmit = (event) => {\n        this.props.onInputSubmit(this.props.github_id);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <FormGroup\n                    label=\"Required GitHub username\"\n                    isRequired\n                    fieldId=\"github-id\"\n                    helperText=\"Please provide the GitHub username\"\n                >\n                    <TextInput\n                        id=\"github-id\"\n                        type=\"text\"\n                        value={this.props.github_id}\n                        onChange={this.handleChange} />\n                </FormGroup>\n                <ActionGroup>\n                    <Button variant=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n                </ActionGroup>\n            </Form>\n        );\n    }\n}\n\n\nclass EventsTable extends React.Component {\n    render() {\n        if (this.props.loading) {\n            return (<div><b>Loading ...</b></div>)\n        }\n        if ('status' in this.props.error_response) {\n            const message = \"Unable to fetch history. Server returned \" +\n                \"status: \" + this.props.error_response.status + \" with \" +\n                \"message: \" + this.props.error_response.statusText\n            return (\n                <Alert variant=\"info\" title={message} />\n            )\n        }\n        if (!this.props.typed_github_id) {\n            return (<div></div>)\n        }\n        const caption = \"History of user \" + this.props.typed_github_id\n        const columns = ['Date', 'Event ID', 'Action Type', 'Repository']\n        const rows = this.props.history.map(\n            (e) => [e.created_at, e.id, e.type, e.repo.name])\n        return (\n            <Table caption={caption} cells={columns} rows={rows}>\n                <TableHeader />\n                <TableBody />\n            </Table>\n        );\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Card>\n                    <CardHeader>\n                        <Title size=\"lg\">View 90 days history of a GitHub user</Title>\n                    </CardHeader>\n                    <CardBody>\n                        <SelectIdForm\n                            github_id={this.props.github_id}\n                            onInputChange={this.props.handleInputChange}\n                            onInputSubmit={this.props.handleInputSubmit} />\n                    </CardBody>\n                </Card>\n                <Card>\n                    <CardHeader></CardHeader>\n                    <CardBody>\n                        <EventsTable\n                            error_response={this.props.error_response}\n                            typed_github_id={this.props.typed_github_id}\n                            loading={this.props.loading}\n                            history={this.props.history} />\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        github_id: state.rForm.github_id,\n        typed_github_id: state.rTable.typed_github_id,\n        history: state.rTable.history,\n        error_response: state.rTable.error_response,\n        loading: state.rTable.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleInputChange: (input_value) => dispatch(\n            {\n                type: 'INPUT_CHANGE',\n                value: input_value\n            }),\n        handleInputSubmit: (github_id) => dispatch(\n            fetchHistoryAction(github_id)\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createMyStore} from './store'\nimport App from './app'\n\n// TODO(fbo): Handle all history pages loading\n// TODO(fbo): Add checkbox to select the history type (pushEvent, Comment, ...)\n\nconst store = createMyStore()\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>,\n    document.getElementById('root')\n);\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport FormReducer from './reducers/form';\nimport TableReducer from './reducers/table';\n\nfunction createMyStore() {\n\n    const rootReducer = combineReducers({\n        rForm: FormReducer,\n        rTable: TableReducer\n    })\n\n    return createStore(\n        rootReducer, applyMiddleware(thunk))\n}\n\nexport {\n    createMyStore\n}\n"],"sourceRoot":""}